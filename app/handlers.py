import asyncio
from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InputMediaPhoto
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.settings import menus, menu_texts, user_menus
from app.db import (
    add_book_for_user,
    list_all_books,
    get_book,
    count_all_books,
    get_all_book_by_index,
    count_user_books_by_status_m2m,
    get_user_book_by_status_and_index_m2m,
    toggle_favorite,
    count_user_favorites,
    get_user_favorite_by_index,
    toggle_status,
    list_book_statuses,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder


router = Router()


# --- FSM –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ ---
class Reg(StatesGroup):
    name = State()
    author = State()
    genre = State()
    photo = State()


# --- Helpers ---
def _map_statuses_ua(statuses: list[str]) -> str:
    """–ü–µ—Ä–µ–∫–ª–∞–¥–∞—î —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø—ñ–¥–ø–∏—Å–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è."""
    mapping = {"in": "–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç–∏", "read": "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"}
    return ", ".join(mapping.get(s, s) for s in statuses) if statuses else "-"


def _build_book_details_text(
    header: str | None,
    page: int | None,
    total: int | None,
    book: dict,
    include_statuses: bool = True,
) -> str:
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç –∑ –¥–æ–∫–ª–∞–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –∫–Ω–∏–≥—É (–Ω–∞–∑–≤–∞, –∞–≤—Ç–æ—Ä, –∂–∞–Ω—Ä, id, —Å—Ç–∞—Ç—É—Å, —É–ª—é–±–ª–µ–Ω–µ)."""
    parts: list[str] = []
    if header is not None:
        parts.append(header)
        parts.append("")
    if page is not None and total is not None:
        parts.append(f"{page}/{total}")
        parts.append("")
    parts.append(f"üìñ –ù–∞–∑–≤–∞: {book['name']}")
    parts.append(f"üë§ –ê–≤—Ç–æ—Ä: {book['author']}")
    parts.append(f"üé≠ –ñ–∞–Ω—Ä: {book['genre']}")
    parts.append(f"üÜî ID: {book['id']}")
    if "is_favorite" in book:
        parts.append(f"‚≠ê –£–ª—é–±–ª–µ–Ω–∞: {'–¢–∞–∫' if book.get('is_favorite') else '–Ω—ñ'}")
    if include_statuses:
        # list_book_statuses –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –∫–æ–¥—ñ–≤ —Å—Ç–∞—Ç—É—Å—ñ–≤
        statuses = _map_statuses_ua(list_book_statuses(book["id"]))
        parts.append(f"üìå –°—Ç–∞—Ç—É—Å: {statuses}")
    return "\n".join(parts)


# --- –ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def show_main_menu(callback: CallbackQuery):
    """–†–µ–¥–∞–≥—É—î –ø–æ—Ç–æ—á–Ω–µ –º–µ–Ω—é –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (—Ç–µ–∫—Å—Ç + –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞)."""
    text = "üìö –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    await edit_menu_message(callback, text=text, reply_markup=kb.first_menu)
    await callback.answer()


# --- –°—Ç–∞—Ä—Ç ---
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–æ–±–ª—è—î /start: –≤–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä–µ –º–µ–Ω—é, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–æ–≤–µ."""
    if message.from_user.id in user_menus:
        try:
            await message.bot.delete_message(
                message.chat.id, user_menus[message.from_user.id]
            )
        except TelegramBadRequest:
            pass
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    msg = await message.answer(
        text=(
            "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø *Book_bot* üìö\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é"
        ),
        reply_markup=kb.first_menu,
    )
    user_menus[message.from_user.id] = msg.message_id


# --- –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º–µ–Ω—é ---
@router.callback_query(F.data == "book_list")
async def open_book_list(callback: CallbackQuery):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –∫–∞—Ä—É—Å–µ–ª—å –∫–Ω–∏–≥ (–∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏) –∑ –Ω—É–ª—å–æ–≤–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É."""
    await render_book_carousel(callback, scope="lib", index=0)
    await callback.answer()


@router.callback_query(F.data == "library_open")
async def library_open(callback: CallbackQuery):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ç—Ä–∏–≥–µ—Ä –≤—ñ–¥–∫—Ä–∏—Ç–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É."""
    await render_book_carousel(callback, scope="lib", index=0)
    await callback.answer()


@router.callback_query(F.data == "add_book")
async def open_add_book(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ FSM –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ ‚Äî –ø—Ä–æ—Å–∏–º–æ –Ω–∞–∑–≤—É."""
    await callback.message.edit_text(
        menu_texts["add_book"] + "\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏:",
        reply_markup=menus["add_book"],
    )
    await state.set_state(Reg.name)
    await callback.answer()


@router.callback_query(F.data == "in_process")
async def open_in_process(callback: CallbackQuery):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –∫–∞—Ä—É—Å–µ–ª—å –∫–Ω–∏–≥ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç–∏'."""
    await render_status_carousel(callback, status="in", index=0)
    await callback.answer()


@router.callback_query(F.data == "favorite_books")
async def open_favorite_books(callback: CallbackQuery):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –∫–∞—Ä—É—Å–µ–ª—å —É–ª—é–±–ª–µ–Ω–∏—Ö –∫–Ω–∏–≥."""
    await render_favorites_carousel(callback, index=0)
    await callback.answer()


@router.callback_query(F.data == "read_books")
async def open_read_books(callback: CallbackQuery):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –∫–Ω–∏–≥."""
    await render_status_carousel(callback, status="read", index=0)
    await callback.answer()


@router.callback_query(F.data == "help")
async def open_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏."""
    await callback.message.edit_text(menu_texts["help"], reply_markup=menus["help"])
    await callback.answer()


# --- –î–µ—Ç–∞–ª—ñ –∫–Ω–∏–≥–∏ ---
@router.callback_query(F.data.startswith("book:"))
async def open_book_details(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–Ω–∏–≥–∏.
    –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∏ callback.data:
      - book:<book_id>
      - book:<book_id>:<scope>:<index>
    scope/index –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É –∫–∞—Ä—É—Å–µ–ª—å.
    """
    parts = callback.data.split(":")
    book_id = None
    scope = None
    index = None
    try:
        if len(parts) >= 2:
            book_id = int(parts[1])
        if len(parts) >= 4:
            scope = parts[2]
            index = int(parts[3])
    except Exception:
        book_id = None
    if book_id is None:
        await callback.answer()
        return
    book = get_book(book_id)
    if not book:
        await callback.answer("–ö–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    text = _build_book_details_text(None, None, None, book, include_statuses=True)
    builder = InlineKeyboardBuilder()
    # –î—ñ—ó –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º (–ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è)
    builder.button(
        text="üìï –•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ ‚Üî", callback_data=f"sttoggle:in:{book['id']}"
    )
    builder.button(text="‚ù§Ô∏è –£–ª—é–±–ª–µ–Ω–∞ ‚Üî", callback_data=f"favtoggle:{book['id']}")
    builder.button(text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ‚Üî", callback_data=f"sttoggle:read:{book['id']}")
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–Ω–∏–≥–∏ ‚Äî –¥–æ–¥–∞—î–º–æ scope/index, —è–∫—â–æ —î
    if scope is not None and index is not None:
        builder.button(
            text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{book['id']}:{scope}:{index}"
        )
    else:
        builder.button(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{book['id']}")
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è: –∞–±–æ –≤ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É –Ω–∞ —Ç—É –∂ —Å—Ç–æ—Ä—ñ–Ω–∫—É, –∞–±–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    back_to_library_cb = (
        f"lib:{index}" if scope == "lib" and isinstance(index, int) else "book_list"
    )
    builder.row(
        InlineKeyboardButton(text="üìö –î–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏", callback_data=back_to_library_cb),
        InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main"),
    )
    await edit_menu_message(
        callback=callback,
        text=text,
        reply_markup=builder.as_markup(),
        photo_id=book.get("photo_id"),
    )
    await callback.answer()


# --- –ö–∞—Ä—É—Å–µ–ª—å –∫–Ω–∏–≥ ---
async def render_book_carousel(callback: CallbackQuery, scope: str, index: int):
    """–†–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–∞—Ä—É—Å–µ–ª—å –≤—Å—ñ—î—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ (–ø–æ —ñ–Ω–¥–µ–∫—Å—É)."""
    if scope == "lib":
        total = count_all_books()
        book = get_all_book_by_index(index)
        header = menu_texts["book_list"]
        left_cb = f"lib:{index-1}"
        right_cb = f"lib:{index+1}"
    else:
        # Fallback: –ø–æ–∫–∞–∑—É—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É
        total = count_all_books()
        book = get_all_book_by_index(index)
        header = menu_texts["book_list"]
        left_cb = f"lib:{index-1}"
        right_cb = f"lib:{index+1}"

    builder = InlineKeyboardBuilder()

    if total == 0 or not book:
        text = header + (
            "\n\n–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." if scope == "lib" else "\n\n–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–Ω–∏–≥."
        )
        builder.button(text="üîô –ù–∞–∑–∞–¥ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")
        builder.adjust(1)
        await edit_menu_message(callback, text=text, reply_markup=builder.as_markup())
        return

    page = index + 1
    text = _build_book_details_text(header, page, total, book, include_statuses=True)

    # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è: –≤–ª—ñ–≤–æ, –¥–µ—Ç–∞–ª—ñ, –≤–ø—Ä–∞–≤–æ, –Ω–∞–∑–∞–¥
    builder.button(text="‚¨ÖÔ∏è", callback_data=left_cb if index > 0 else "noop")
    builder.button(text="üîé –î–µ—Ç–∞–ª—ñ", callback_data=f"book:{book['id']}:lib:{index}")
    builder.button(text="‚û°Ô∏è", callback_data=right_cb if index < total - 1 else "noop")
    builder.row(InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main"))
    await edit_menu_message(
        callback=callback,
        text=text,
        reply_markup=builder.as_markup(),
        photo_id=book.get("photo_id"),
    )


# --- –ö–∞—Ä—É—Å–µ–ª—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
async def render_status_carousel(callback: CallbackQuery, status: str, index: int):
    """–†–µ–Ω–¥–µ—Ä –∫–∞—Ä—É—Å–µ–ª—ñ –¥–ª—è —Å—Ç–∞—Ç—É—Å—ñ–≤ 'in' —Ç–∞ 'read'."""
    user_id = callback.from_user.id
    if status == "in":
        header = menu_texts["in_process"]
        total = count_user_books_by_status_m2m(user_id, "in")
        book = get_user_book_by_status_and_index_m2m(user_id, "in", index)
        left_cb = f"in:{index-1}"
        right_cb = f"in:{index+1}"
    elif status == "fav":
        # –ó–∞ —Å—É–º—ñ—Å–Ω–∏—Ü—Ç–≤–æ–º; —Ñ–∞–∫—Ç–∏—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –æ–∫—Ä–µ–º–∞ –∫–∞—Ä—É—Å–µ–ª—å
        header = menu_texts["favorite_books"]
        total = count_user_favorites(user_id)
        book = get_user_favorite_by_index(user_id, index)
        left_cb = f"fav:{index-1}"
        right_cb = f"fav:{index+1}"
    elif status == "read":
        header = menu_texts["read_books"]
        total = count_user_books_by_status_m2m(user_id, "read")
        book = get_user_book_by_status_and_index_m2m(user_id, "read", index)
        left_cb = f"read:{index-1}"
        right_cb = f"read:{index+1}"
    else:
        # –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞—Ç—É—Å -> –ø–æ–∫–∞–∑—É—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É
        await render_book_carousel(callback, scope="lib", index=0)
        return

    builder = InlineKeyboardBuilder()

    if total == 0 or not book:
        text = header + "\n\n–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–Ω–∏–≥."
        builder.button(text="üîô –ù–∞–∑–∞–¥ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")
        builder.adjust(1)
        await edit_menu_message(callback, text=text, reply_markup=builder.as_markup())
        return

    page = index + 1
    text = _build_book_details_text(header, page, total, book, include_statuses=False)

    builder.button(text="‚¨ÖÔ∏è", callback_data=left_cb if index > 0 else "noop")
    builder.button(text="üîé –î–µ—Ç–∞–ª—ñ", callback_data=f"book:{book['id']}:in:{index}")
    builder.button(text="‚û°Ô∏è", callback_data=right_cb if index < total - 1 else "noop")
    builder.row(InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main"))
    await edit_menu_message(
        callback=callback,
        text=text,
        reply_markup=builder.as_markup(),
        photo_id=book.get("photo_id"),
    )


# --- –ö–∞—Ä—É—Å–µ–ª—å —É–ª—é–±–ª–µ–Ω–∏—Ö ---
async def render_favorites_carousel(callback: CallbackQuery, index: int):
    """–†–µ–Ω–¥–µ—Ä—É—î –∫–∞—Ä—É—Å–µ–ª—å —É–ª—é–±–ª–µ–Ω–∏—Ö –∫–Ω–∏–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_id = callback.from_user.id
    header = menu_texts["favorite_books"]
    total = count_user_favorites(user_id)
    book = get_user_favorite_by_index(user_id, index)

    builder = InlineKeyboardBuilder()

    if total == 0 or not book:
        text = header + "\n\n–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö –∫–Ω–∏–≥."
        builder.button(text="üîô –ù–∞–∑–∞–¥ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")
        builder.adjust(1)
        await edit_menu_message(callback, text=text, reply_markup=builder.as_markup())
        return

    page = index + 1
    text = _build_book_details_text(header, page, total, book, include_statuses=False)

    builder.button(text="‚¨ÖÔ∏è", callback_data=(f"fav:{index-1}" if index > 0 else "noop"))
    builder.button(text="üîé –î–µ—Ç–∞–ª—ñ", callback_data=f"book:{book['id']}:fav:{index}")
    builder.button(
        text="‚û°Ô∏è", callback_data=(f"fav:{index+1}" if index < total - 1 else "noop")
    )
    builder.row(InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main"))
    await edit_menu_message(
        callback=callback,
        text=text,
        reply_markup=builder.as_markup(),
        photo_id=book.get("photo_id"),
    )


@router.callback_query(F.data.startswith("lib:"))
async def carousel_lib_nav(callback: CallbackQuery):
    try:
        index = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer()
        return
    if index < 0:
        index = 0
    await render_book_carousel(callback, scope="lib", index=index)
    await callback.answer()


@router.callback_query(F.data.startswith("my:"))
async def carousel_my_nav(callback: CallbackQuery):
    # –ú–∞—Ä—à—Ä—É—Ç –∑–∞—Å—Ç–∞—Ä—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è "–ú–æ—ó –∫–Ω–∏–≥–∏". –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É.
    await render_book_carousel(callback, scope="lib", index=0)
    await callback.answer()


@router.callback_query(F.data.startswith("in:"))
async def carousel_in_nav(callback: CallbackQuery):
    try:
        index = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer()
        return
    if index < 0:
        index = 0
    await render_status_carousel(callback, status="in", index=index)
    await callback.answer()


@router.callback_query(F.data.startswith("fav:"))
async def carousel_fav_nav(callback: CallbackQuery):
    try:
        index = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer()
        return
    if index < 0:
        index = 0
    await render_favorites_carousel(callback, index=index)
    await callback.answer()


@router.callback_query(F.data.startswith("read:"))
async def carousel_read_nav(callback: CallbackQuery):
    try:
        index = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer()
        return
    if index < 0:
        index = 0
    await render_status_carousel(callback, status="read", index=index)
    await callback.answer()


@router.callback_query(F.data == "noop")
async def noop_btn(callback: CallbackQuery):
    await callback.answer()


@router.callback_query(F.data.startswith("sttoggle:"))
async def toggle_status_handler(callback: CallbackQuery):
    try:
        _, status, book_id_str = callback.data.split(":", 2)
        book_id = int(book_id_str)
        if status not in {"in", "read"}:
            await callback.answer()
            return
    except Exception:
        await callback.answer()
        return

    try:
        new_val = toggle_status(book_id, status)
        # –≤–∑–∞—î–º–æ–≤–∏–∫–ª—é—á–Ω—ñ—Å—Ç—å –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–∞ —É –ë–î: —è–∫—â–æ –≤–º–∏–∫–∞—î–º–æ –æ–¥–∏–Ω ‚Äî –≤–∏–º–∏–∫–∞—î—Ç—å—Å—è —ñ–Ω—à–∏–π
        ua = "–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç–∏" if status == "in" else "–ü—Ä–æ—á–∏—Ç–∞–Ω–∞"
        await callback.answer(
            ("–î–æ–¥–∞–Ω–æ —Å—Ç–∞—Ç—É—Å " + ua) if new_val else ("–ó–Ω—è—Ç–æ —Å—Ç–∞—Ç—É—Å " + ua)
        )
    except Exception:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É", show_alert=True)
        return

    try:
        await open_book_details(callback)
    except Exception:
        await callback.answer()


@router.callback_query(F.data.startswith("favtoggle:"))
async def toggle_fav(callback: CallbackQuery):
    try:
        book_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer()
        return
    try:
        new_val = toggle_favorite(book_id)
        await callback.answer(
            "–î–æ–¥–∞–Ω–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö" if new_val else "–ü—Ä–∏–±—Ä–∞–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö"
        )
    except Exception:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–æ–≥–æ", show_alert=True)
        return
    try:
        await open_book_details(callback)
    except Exception:
        await callback.answer()


# --- –î–æ–ø–æ–º—ñ–∂–Ω–µ: –ø–æ–∫–∞–∑ —É –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ (—Ñ–æ—Ç–æ+–ø—ñ–¥–ø–∏—Å –∞–±–æ —Ç–µ–∫—Å—Ç) ---
async def edit_menu_message(
    callback: CallbackQuery, text: str, reply_markup, photo_id: str | None = None
):
    msg = callback.message
    chat_id = msg.chat.id
    user_id = callback.from_user.id
    # –ï—Ñ–µ–∫—Ç–∏–≤–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è: —è–∫—â–æ —î photo_id ‚Äî –≤—ñ–¥–¥–∞—î–º–æ –ø–µ—Ä–µ–≤–∞–≥—É —Ñ–æ—Ç–æ
    # 1) —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ —Ñ–æ—Ç–æ ‚Äî —Ä–µ–¥–∞–≥—É—î–º–æ –º–µ–¥—ñ–∞
    # 2) —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç ‚Äî –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ —Ñ–æ—Ç–æ
    # 3) —è–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î ‚Äî —Ä–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç
    if photo_id and msg.photo:
        try:
            await msg.edit_media(
                media=InputMediaPhoto(media=photo_id, caption=text),
                reply_markup=reply_markup,
            )
            return
        except Exception:
            pass
    if photo_id and not msg.photo:
        try:
            await msg.delete()
        except Exception:
            pass
        sent = await callback.bot.send_photo(
            chat_id=chat_id, photo=photo_id, caption=text, reply_markup=reply_markup
        )
        user_menus[user_id] = sent.message_id
        return
    # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–∫—Å—Ç, –∞ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ ‚Äî –∑–∞–º—ñ–Ω—é—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ
    if not photo_id and msg.photo:
        try:
            await msg.delete()
        except Exception:
            pass
        sent = await callback.bot.send_message(
            chat_id=chat_id, text=text, reply_markup=reply_markup
        )
        user_menus[user_id] = sent.message_id
        return
    try:
        await msg.edit_text(text=text, reply_markup=reply_markup)
        return
    except Exception:
        pass
    # Fallback: –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–æ–≥–æ –∂ —Ç–∏–ø—É, –±–µ–∑ –∑–∞–π–≤–∏—Ö delete
    if photo_id:
        sent = await callback.bot.send_photo(
            chat_id=chat_id, photo=photo_id, caption=text, reply_markup=reply_markup
        )
    else:
        sent = await callback.bot.send_message(
            chat_id=chat_id, text=text, reply_markup=reply_markup
        )
    user_menus[user_id] = sent.message_id


# --- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
@router.callback_query(F.data == "back_main")
async def back_to_main(callback: CallbackQuery):
    await show_main_menu(callback)


# --- –ö–†–û–ö 1: –ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏ ---
@router.message(Reg.name)
async def add_book_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)

    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    menu_id = user_menus.get(message.from_user.id)
    if menu_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=menu_id,
                text="‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:",
                reply_markup=kb.add_book,
            )
        except TelegramBadRequest:
            pass

    await state.set_state(Reg.author)


# --- –ö–†–û–ö 2: –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ ---
@router.message(Reg.author)
async def add_book_author(message: types.Message, state: FSMContext):
    await state.update_data(author=message.text)

    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    menu_id = user_menus.get(message.from_user.id)
    if menu_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=menu_id,
                text="üìö –í–≤–µ–¥—ñ—Ç—å –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏:",
                reply_markup=kb.add_book,
            )
        except TelegramBadRequest:
            pass

    await state.set_state(Reg.genre)


# --- –ö–†–û–ö 3: –ñ–∞–Ω—Ä –∫–Ω–∏–≥–∏ ---
@router.message(Reg.genre)
async def add_book_genre(message: types.Message, state: FSMContext):
    await state.update_data(genre=message.text)

    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    menu_id = user_menus.get(message.from_user.id)
    if menu_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=menu_id,
                text="üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∫–Ω–∏–≥–∏ (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'):",
                reply_markup=kb.add_book,
            )
        except TelegramBadRequest:
            pass

    await state.set_state(Reg.photo)


# --- –ö–†–û–ö 4: –§–æ—Ç–æ –∫–Ω–∏–≥–∏ ---
@router.message(Reg.photo, F.content_type.in_({"photo", "text"}))
async def add_book_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ
    if message.photo:
        await state.update_data(photo=message.photo[-1].file_id)
    else:
        await state.update_data(photo=None)

    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
    data = await state.get_data()

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–Ω–∏–≥—É –≤ –±–∞–∑—É
    try:
        book_id = add_book_for_user(
            tg_user_id=message.from_user.id,
            name=data["name"],
            author=data["author"],
            genre=data["genre"],
            photo_id=data.get("photo"),
            status="my",
        )
    except Exception:
        book_id = None

    # –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    confirm_text = (
        "‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞!\n\n"
        f"üìñ –ù–∞–∑–≤–∞: {data['name']}\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {data['author']}\n"
        f"üé≠ –ñ–∞–Ω—Ä: {data['genre']}" + (f"\nüÜî ID: {book_id}" if book_id else "")
    )

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    menu_id = user_menus.get(message.from_user.id)
    if menu_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=menu_id,
                text=confirm_text,
                reply_markup=kb.first_menu,
            )
        except TelegramBadRequest:
            pass

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ FSM
    await state.clear()


# --- Easter egg ---
@router.message(F.text == "drivin in my car")
async def asgore(message: types.Message):
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.delete()

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—ñ—Ñ–∫—É
    gif_message = await message.answer_animation(
        "https://i.redd.it/vpu9786tw89f1.gif"
    )

    # –ß–µ–∫–∞—î–º–æ 3 —Å–µ–∫—É–Ω–¥–∏
    await asyncio.sleep(3)

    # –í–∏–¥–∞–ª—è—î–º–æ –≥—ñ—Ñ–∫—É
    await gif_message.delete()


@router.callback_query(F.data.startswith("delete:"))
async def delete_book_handler(callback: CallbackQuery):
    try:
        parts = callback.data.split(":")
        book_id = int(parts[1])
        scope = parts[2] if len(parts) >= 3 else None
        index = int(parts[3]) if len(parts) >= 4 else 0
    except Exception:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ", show_alert=True)
        return

    from app.db import (
        delete_book,
        count_all_books,
        count_user_books_by_status_m2m,
        count_user_favorites,
    )

    # –°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–∏–≥—É
    if delete_book(book_id):
        await callback.answer("–ö–Ω–∏–≥—É –≤–∏–¥–∞–ª–µ–Ω–æ")
    else:
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–∏–≥—É", show_alert=True)
        return

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ scope
    user_id = callback.from_user.id
    if scope == "lib":
        total = count_all_books()
        new_index = index if index < total else max(total - 1, 0)
        await render_book_carousel(callback, scope="lib", index=new_index)
    elif scope == "in":
        from app.db import get_user_book_by_status_and_index_m2m

        total = count_user_books_by_status_m2m(user_id, "in")
        new_index = index if index < total else max(total - 1, 0)
        await render_status_carousel(callback, status="in", index=new_index)
    elif scope == "read":
        from app.db import get_user_book_by_status_and_index_m2m

        total = count_user_books_by_status_m2m(user_id, "read")
        new_index = index if index < total else max(total - 1, 0)
        await render_status_carousel(callback, status="read", index=new_index)
    elif scope == "fav":
        total = count_user_favorites(user_id)
        new_index = index if index < total else max(total - 1, 0)
        await render_favorites_carousel(callback, index=new_index)
    else:
        await show_main_menu(callback)
